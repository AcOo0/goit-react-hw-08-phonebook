{"version":3,"file":"static/js/428.5fda15f5.chunk.js","mappings":"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","sources":["../node_modules/nanoid/url-alphabet/index.js","../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/MyContacts/MyContactForm/my-contact-form.module.css?3138","components/MyContacts/MyContactForm/MyContactForm.jsx","redux/filter/filter-selectors.js","redux/contacts/constants-selectors.js","webpack://react-homework-template/./src/components/MyContacts/MyContactList/my-contact-list.module.css?18df","components/MyContacts/MyContactList/MyContactList.jsx","webpack://react-homework-template/./src/components/MyContacts/Filter/filter.module.css?8cfb","components/MyContacts/Filter/Filter.jsx","webpack://react-homework-template/./src/components/MyContacts/my-contacts.module.css?4f12","components/MyContacts/MyContacts.jsx","pages/MyContactsPage/MyContactsPage.jsx"],"sourcesContent":["export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n","import { urlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += urlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"my-contact-form_form__Rqz2n\",\"formElements\":\"my-contact-form_formElements__q7l3v\",\"btn\":\"my-contact-form_btn__UwrB0\"};","import { useState } from \"react\";\nimport { useDispatch } from 'react-redux';\nimport { nanoid } from \"nanoid\";\n\nimport { addContact } from \"../../../redux/contacts/contacts-operations.js\";\n\nimport styles from './my-contact-form.module.css'\n\nconst INITIAL_STATE = {\n    contacts: [],\n    filter: '',\n    name: '',\n    phone: ''\n};\n\nconst MyContactForm = () => {\n    const [state, setState] = useState({ ...INITIAL_STATE });\n    // const {items} = useSelector(selectAllContacts);\n    const dispatch = useDispatch();\n\n    // useEffect(() => {\n    //     dispatch(fetchContacts());\n    // }, []);\n    // const isDublicate = ({ name, phone }) => {\n    //     const normalizedName = name.toLowerCase();\n    //     const normalizedPhone = phone.trim();\n        \n    //     const dublicate = items.find(item => {\n    //         const normalizeCurrentName = item.name.toLowerCase();\n    //         const normalizeCurrentPhone = item.phone.trim();\n    //         return (normalizeCurrentName === normalizedName || normalizeCurrentPhone === normalizedPhone)\n    //     })\n    //     return Boolean(dublicate);\n    // };\n\n    const onAddContact = (data) => {\n        dispatch(addContact(data));\n    };\n\n    const handleChange = ({ target }) => {\n        const { name, value } = target;\n        setState({\n            ...state,\n            [name]: value,\n        })\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        onAddContact({ ...state });\n        // if (!isDublicate({ ...state })) {\n            reset();\n        // }\n    };\n\n    const reset = () => {\n        setState({ ...INITIAL_STATE });\n    };\n\n    \n    const contactNameId = nanoid();\n    const contactPhoneId = nanoid();\n    \n    const { name, phone } = state;\n\n    return (\n        <form onSubmit={handleSubmit} className={styles.form}>\n            <div className={styles.formElements}>\n                <label htmlFor={contactNameId}>Name</label>\n                <input\n                    value={name}\n                    onChange={handleChange}\n                    id={contactNameId}\n                    name=\"name\"\n                    required\n                    type=\"text\"\n                    placeholder=\"Name\" />\n            </div>\n            <div className={styles.formElements}>\n                <label htmlFor={contactPhoneId}>Phone</label>\n                <input\n                    value={phone}\n                    onChange={handleChange}\n                    id={contactPhoneId}\n                    name=\"phone\"\n                    required\n                    pattern=\"^[+0-9\\-\\(\\)\\s]+$\"\n                    type=\"tel\"\n                    placeholder=\"Phone\" />\n            </div>\n            <button className={styles.btn} type=\"submit\">Add contact</button>\n        </form>\n    );\n}\n\nexport default MyContactForm;","export const selectFilter = store => store.filter;","import { createSelector } from \"@reduxjs/toolkit\";\nimport { selectFilter } from \"../filter/filter-selectors\";\n\nexport const selectAllContacts = store => store.contacts.items;\n\nexport const selectContacts = store => store.contacts;\n\nexport const selectFilteredContacts = createSelector(\n    [selectAllContacts, selectFilter],\n    (items, filter) => {\n        if (!filter) {\n            return items;\n        }\n\n        const normalizedFilter = filter.toLowerCase();\n\n        const filteredContacts = items.filter(({ name, phone }) => {\n            const normalizedName = name.toLowerCase();\n\n            return (normalizedName.includes(normalizedFilter) || phone.includes(normalizedFilter))\n        })\n        return filteredContacts\n    }\n);","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"my-contact-list_btn__XP1KU\",\"list\":\"my-contact-list_list__v30K-\"};","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { fetchContacts, deleteContact } from \"../../../redux/contacts/contacts-operations\";\n\nimport { selectContacts, selectFilteredContacts } from '../../../redux/contacts/constants-selectors';\n\nimport styles from \"./my-contact-list.module.css\"\n\nconst MyContactList = () => {\n    const items = useSelector(selectFilteredContacts);\n    const { isLoading, error } = useSelector(selectContacts);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    const onDeleteContact = (id) => {\n        dispatch(deleteContact(id));\n    };\n\n    const elements = items.map(({ id, name, phone }) => \n            <li\n                className={styles.list}\n                key={id}\n            >\n                {name}: {phone}\n                <button\n                    onClick={() => onDeleteContact(id)}\n                    className={styles.btn}\n                    type=\"button\">\n                    Delete\n                </button>\n            </li>\n        )\n\n    return (\n        <ul>\n            {isLoading && <p>...Loading</p>}\n            {error && <p>{error}</p>}\n            {elements}\n        </ul>\n    );\n};\n\nexport default MyContactList;","// extracted by mini-css-extract-plugin\nexport default {\"findInputText\":\"filter_findInputText__gkNIH\",\"serchInput\":\"filter_serchInput__c+Su+\"};","import { useSelector, useDispatch } from 'react-redux';\n\nimport { setFilter } from '../../../redux/filter/filter-slice';\nimport { selectFilter } from '../../../redux/filter/filter-selectors';\n\nimport styles from './filter.module.css'\n\nconst Filter = () => {\n\n    const dispatch = useDispatch();\n    const filter = useSelector(selectFilter);\n    \n    const changeFilter = ({ target }) => dispatch(setFilter(target.value));\n\n    return (<>\n        <p className={styles.findInputText}>Find contacts by name</p>\n        <input\n            type='text'\n            value={filter}\n            onChange={changeFilter}\n            className={styles.serchInput}\n            name='filter'\n            placeholder='Search' />\n    </>\n    )\n};\n\nexport default Filter;","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"my-contacts_wrapper__b-SwW\",\"listwrapper\":\"my-contacts_listwrapper__YNk6H\"};","import MyContactForm from './MyContactForm/MyContactForm';\nimport MyContactList from './MyContactList/MyContactList';\nimport Filter from './Filter/Filter';\n\nimport styles from './my-contacts.module.css'\n\nconst MyContacts = () => {\n\n    return (\n        <div className={styles.wrapper}>\n            <h1>Phonebook</h1>\n            <MyContactForm />\n            <div className={styles.listwrapper}>\n                <h2>Contacts</h2>\n                <Filter />\n                <MyContactList />\n            </div>\n        </div>\n    );\n}\n\nexport default MyContacts;","import MyContacts from \"../../components/MyContacts/MyContacts\";\n\nconst MyBooksPage = ()=> {\n    return (\n        <div>\n            <h1>My Contacts page</h1>\n            <MyContacts />\n        </div>\n    )\n}\n\nexport default MyBooksPage;"],"names":["urlAlphabet","nanoid","size","arguments","length","undefined","id","bytes","crypto","getRandomValues","Uint8Array","INITIAL_STATE","contacts","filter","name","phone","_useState","useState","_objectSpread","_useState2","_slicedToArray","state","setState","dispatch","useDispatch","handleChange","_ref","target","value","_defineProperty","reset","contactNameId","contactPhoneId","_jsxs","onSubmit","e","data","preventDefault","addContact","className","styles","children","_jsx","htmlFor","onChange","required","type","placeholder","pattern","selectFilter","store","selectContacts","selectFilteredContacts","createSelector","items","normalizedFilter","toLowerCase","includes","useSelector","_useSelector","isLoading","error","useEffect","fetchContacts","elements","map","onClick","deleteContact","onDeleteContact","_Fragment","setFilter","MyContactForm","Filter","MyContactList","MyContacts"],"sourceRoot":""}